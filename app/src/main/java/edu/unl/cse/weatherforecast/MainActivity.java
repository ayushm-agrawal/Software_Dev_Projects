package edu.unl.cse.weatherforecast;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ListView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

//***********************************************************************
// YOU NEED TO COMPLETE THE IMPLEMENTATION OF GetWeatherTask and
// convertJSONtoArrayList
//***********************************************************************


public class MainActivity extends AppCompatActivity {
    // List of Weather objects representing the forecast
    // since we are doing only five days, the ArrayList will
    // have five objects in it.
    private List<Weather> weatherList = new ArrayList<>();

    // ArrayAdapter for binding Weather objects to a ListView
    // this is needed since a ListView is a collection of GUI components
    // For example, to display an image, a condition is given
    // it is then used to compare to find an image that is displayed
    // through weatherListView
    private WeatherArrayAdapter weatherArrayAdapter;
    private ListView weatherListView; // displays weather info

    // configure Toolbar, ListView and FAB
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // autogenerated code to inflate layout and configure Toolbar
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // create ArrayAdapter to bind weatherList to the weatherListView
        weatherListView = (ListView) findViewById(R.id.weatherListView);
        // We specify the WeatherArrayAdapter in a different classfile.
        // We now use the new operator to create an object based on
        // that specification.
        weatherArrayAdapter = new WeatherArrayAdapter(this, weatherList);
        // We then map the adapter to the ListView for display
        weatherListView.setAdapter(weatherArrayAdapter);

        // configure FAB to hide keyboard and initiate web service request
        // This is the little check box that we find on the screen
        FloatingActionButton fab =
                (FloatingActionButton) findViewById(R.id.fab);
        // We then set a listener to act when the user clicks on FAB
        fab.setOnClickListener(fabClickListener);
    }
    // programmatically dismiss keyboard when user touches FAB
    private void dismissKeyboard(View view) {
        // we first map an InputMethodManager to object imm
        InputMethodManager imm = (InputMethodManager) getSystemService(
                Context.INPUT_METHOD_SERVICE);
        // We then invoke a method to hide the keyboard
        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    // create openweathermap.org web service URL using city
    private URL createURL(String city) {
        String apiKey = getString(R.string.api_key);
        String baseUrl = getString(R.string.web_service_url);

        // this is a try-catch block. When we try to execute here, if first executes
        // code in the try block. If succeeds, it just exits the block and execute
        // return null. However, if a runtime error occurs, it would perform operations
        // in the catch block. In this case, it provides information to help us debug
        // the error.
        try {
            // create URL for specified city and imperial units (Fahrenheit)
            String urlString = baseUrl + URLEncoder.encode(city, "UTF-8") +
                    "&units=imperial&cnt=5&APPID=" + apiKey;
            return new URL(urlString);
        }
        catch (Exception e) {
            e.printStackTrace();
        }

        return null; // URL was malformed
    }

    // makes the REST web service call to get weather data and
    // saves the data to a local HTML file
    // this is done as a private class, meaning that it can only be
    // called from onCreate. This function should be called by
    // fabClickListener since we only need to get weather info when
    // the user click on FAB
    private class GetWeatherTask
            extends AsyncTask<URL, Void, JSONObject> {
        // more info about AsyncTask can be found at:
        // http://developer.android.com/reference/android/os/AsyncTask.html
        // typically, there are four steps to initiate an AsyncTask
        // 1. onPreExecute() used to set up UI such as progress bar
        // 2. doInBackground(params ...) specify what to do once the task is initiated
        // 3. onProgressUpdate() to display progress (update status bar)
        // 4. onPostExecute(result)

        @Override
        protected JSONObject doInBackground(URL... params) {
            HttpURLConnection connection = null;
            try {
                connection = (HttpURLConnection) params[0].openConnection();
                int response = connection.getResponseCode();
                if (response == HttpURLConnection.HTTP_OK) {
                    // you will need to create a builder object of type StringBuilder
                    // this is used to build JSON object that will return the response
                    // sent by the web service.
                    // you will need a streamReader object to create channel for webservice response.
                    // you will also need a reader object of type BufferedReader that is
                    // reading from an streamReader.
                    StringBuilder builder = new StringBuilder();
                    InputStreamReader streamReader = new InputStreamReader(connection.getInputStream());
                    try (BufferedReader reader = new BufferedReader(streamReader)) {
                        String inputStr;
                        while ((inputStr = reader.readLine()) != null)
                            builder.append(inputStr);

                        JSONObject jsonResponse = new JSONObject(builder.toString());
                        System.out.println("Return JSON obeject successful"+jsonResponse);
                        return jsonResponse;
                    }
                    catch (IOException e){
                        System.out.println("Bad data: " + e.getMessage());
                }
              //      JSONObject jsonResponse = new JSONObject();// finish this line

                }
                else { // you need to finish this block
                    System.out.println("Connection failed");
                }
            }
            catch (Exception e){// you need to finish this block
                System.out.println("Could not open connection: " + e.getMessage());
            }
            finally{
                connection.disconnect();
            }
// END YOUR CODE HERE
            return null;
        }

        // process JSON response and update ListView
        @Override
        protected void onPostExecute(JSONObject weather) {
            convertJSONtoArrayList(weather); // repopulate weatherList
            weatherArrayAdapter.notifyDataSetChanged(); // rebind to ListView
            weatherListView.smoothScrollToPosition(0); // scroll to top
        }
    }

    // create Weather objects from JSONObject containing the forecast
    private void convertJSONtoArrayList(JSONObject forecast) {
        weatherList.clear(); // clear old weather data
        // ADD YOUR CODE HERE
        try{
            JSONArray list = forecast.getJSONArray("list");
            //convert each element of list to a Weather object
            for (int i = 0; i < list.length(); ++i){
                JSONObject day = list.getJSONObject(i); //get one day's data
                // get the day's temperatires ("temp") JSONObject
                JSONObject temperatures = day.getJSONObject("temp");
                //get day's "weather" JSONObject fir the description and icon
                JSONObject weather =
                        day.getJSONArray("weather").getJSONObject(0);
                // add new Weather onject to weatherlist
                weatherList.add(new Weather(
                        day.getLong("dt"), //date/tome timestamp
                        temperatures.getDouble("min"), //minimum temperature
                        temperatures.getDouble("max"), // maximum temperature
                        day.getDouble("humidity"), // percent humidity
                        weather.getString("description"), //weather conditions
                        weather.getString("icon"))); //icon name
            }
        }
        catch (JSONException e){
            e.printStackTrace();
        }
        // END YOUR CODE HERE
    }
    // this method listens for any click on FAB. When that happens, it forms the URL string (url) and
    // invokes GetWeatherTask by first creates getLocalWeatherTask object of type GetWeatherTask() and then calls
    // getLocalWeatherTask.execute(url).
    private final View.OnClickListener fabClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            // get text from locationEditText and create web service URL
            EditText locationEditText =
                    (EditText) findViewById(R.id.locationEditText);
            String city = locationEditText.getText().toString();
            URL url = createURL(city);

            // hide keyboard and initiate a GetWeatherTask to download
            // weather data from OpenWeatherMap.org in a separate thread
            if (url != null) {
                dismissKeyboard(locationEditText);
                GetWeatherTask getLocalWeatherTask = new GetWeatherTask();
                getLocalWeatherTask.execute(url);
            }
            else {
                Snackbar.make(findViewById(R.id.coordinatorLayout),
                        R.string.invalid_url, Snackbar.LENGTH_LONG).show();
            }
        }
    };
}

